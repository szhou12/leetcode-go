package leetcode

import "sort"

func minMalwareSpread(graph [][]int, initial []int) int {
	n := len(graph)
	uf := UnionFind{}
	uf.Init()
	for i := 0; i < n; i++ {
		uf.father[i] = i
	}

	// Step 1: build components
	for i := 0; i < n; i++ {
		for j := 0; j < n; j++ {
			if i != j && graph[i][j] == 1 {
				if uf.Find(i) != uf.Find(j) {
					uf.Union(i, j)
				}
			}
		}
	}

	// Step 2: count each component's size + record each component's initial infected nodes
	compSize := make(map[int]int)
	for i := 0; i < n; i++ {
		root := uf.Find(i)
		compSize[root]++
	}

	compMalwares := make(map[int][]int)
	for _, node := range initial {
		root := uf.Find(node)
		if _, ok := compMalwares[root]; !ok {
			compMalwares[root] = make([]int, 0)
		}
		compMalwares[root] = append(compMalwares[root], node)
	}

	// Step 3: For all components who have ONLY 1 infected node, find the largest component
	res := -1
	size := 0
	for root, nodes := range compMalwares {
		if len(nodes) == 1 {
			if compSize[root] > size {
				res = nodes[0]
				size = compSize[root]
			} else if compSize[root] == size {
				res = min(res, nodes[0])
			}
		}
	}

	if res == -1 { // Cannot find any component with ONLY 1 infected node, return the smallest initial index
		sort.Ints(initial)
		return initial[0]
	}

	return res
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

type UnionFind struct {
	father map[int]int
}

func (uf *UnionFind) Init() {
	uf.father = make(map[int]int)
}

func (uf *UnionFind) Union(x int, y int) {
	fx := uf.father[x]
	fy := uf.father[y]
	if fx < fy {
		uf.father[fy] = fx
	} else {
		uf.father[fx] = fy
	}
}

func (uf *UnionFind) Find(x int) int {
	if x != uf.father[x] {
		uf.father[x] = uf.Find(uf.father[x])
	}
	return uf.father[x]
}
